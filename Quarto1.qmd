---
title: "Analiza danych Airbnb"
format: html
editor: visual
---

## 1. Wczytanie pakietów

```{r}
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
library(readr)
library(tidyverse)
library(magrittr)
library(janitor)
```

## 2. Wczytanie danych

W danych do projektu znajduje się 20 osobnych plików .csv. Aby zacząć nad nimi pracować należy złączyć je w jeden dataset. Dla dalszej analizy do danych dodajemy dwie kolumny: city i type, które zawierają informacje z nazwy pliku, czyli miasto i pobyt na weekend/ w tygodniu.

```{r}

# Ścieżka do folderu z plikami
folder_path <- "Data"  

# Pobierz listę plików CSV
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)

# Funkcja do wczytywania pliku i dodawania kolumn city i type
read_and_tag <- function(file_path) 
  {
  # Wyciągnięcie nazwy pliku bez ścieżki
  file_name <- basename(file_path)
  
  # Ekstrakcja typu (weekdays/weekends)
  type <- ifelse(str_detect(file_name, "weekends"), "weekends", "weekdays")
  
  # Ekstrakcja nazwy miasta (wszystko przed "_weekdays" lub "_weekends")
  city <- str_remove(file_name, "_week(ends|days)\\.csv")
  
  # Wczytanie danych i dodanie kolumn
  df <- read_csv(file_path) %>%
    mutate(city = city, type = type)
  
  return(df)
}

# Wczytanie i połączenie wszystkich plików
combined_data <- lapply(file_list, read_and_tag) %>% bind_rows()

# Zobacz wynik
head(combined_data)

```

Zmieniamy dataset na tibble oraz typy niektórych kolumn na factor.

```{r}
combined_data <- as_tibble(combined_data)

combined_data <- combined_data %>%
mutate(across(c(room_type, room_shared, room_private, city, host_is_superhost, type), as.factor))

str(combined_data)
```
Do dalszej analizy używać będziemy tylko kolumny room_type, ponieważ kolumna room_private przedstawia te same dane co room_type, a room_shared uznaje listing entire home/apt jako dzielony pokój. Najlepszy wgląd w dane daje room_type, ponieważ przedstawia podział na prywatny pokój, apartament i dzielony pokój.

```{r}
faktory <- select(combined_data, where(is.factor))
#apply(faktory, 2, function(x) table(x))
summary(faktory)
```
```{r}
ggplot(combined_data, aes(x = cleanliness_rating)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
  labs(
    title = "Histogram oceny czystości",
    x = "Ocena czystości",
    y = "Liczba obiektów"
  ) +
  theme_minimal()

```
```{r}


ggplot(combined_data, aes(x = guest_satisfaction_overall)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
  labs(
    title = "Histogram oceny klientow",
    x = "Ocena",
    y = "Liczba obiektów"
  ) +
  theme_minimal()

```

```{r}


ggplot(combined_data, aes(x = attr_index_norm)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
  labs(
    title = "attr_index",
    x = "Ocena",
    y = "Liczba obiektów"
  ) +
  theme_minimal()

```


```{r}


combined_data %>%
  group_by(city) %>%
  summarise(srednia_odl_metro = mean(metro_dist, na.rm = TRUE)) %>%
  ggplot(aes(x = city, y = srednia_odl_metro)) +
  geom_col(fill = "steelblue") +
  labs(
    title = "Średnia odległość od metra",
    x = "Miasto",
    y = "Średnia odległość"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

```{r}


combined_data %>%
  group_by(city) %>%
  summarise(srednia_czystosc = mean(cleanliness_rating, na.rm = TRUE)) %>%
  ggplot(aes(x = city, y = srednia_czystosc)) +
  geom_col(fill = "steelblue") +
  labs(
    title = "Średnia czystosc",
    x = "Miasto",
    y = "Średnia czystosc"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```


```{r}


combined_data %>%
  count(city, name = "liczebnosc") %>%
  mutate(procent = round((liczebnosc/ sum(liczebnosc))*100, 2)) %>%
  arrange(desc(procent))

```


Usunięcie kolumny z numerami wiersza
```{r}
combined_data <- combined_data %>% select(-`...1`)
glimpse(combined_data)
```

```{r} 
#poprawa liter miast na duze
popraw_city <- function(df) {
  df %>%
    mutate(city = str_to_title(city))
}
popraw_city(combined_data)


```

```{r}
combined_data%>%janitor::tabyl(city, room_type)
```

```{r}
with(combined_data, table(city, type)) %>% as_tibble()%>% 
  ggplot(aes(city, n, fill=type)) + geom_col(position="dodge")
```

```{r}
with(combined_data, table(city, room_type)) %>% as_tibble()%>% 
  ggplot(aes(city, n, fill=room_type)) + geom_col(position="dodge")
```



## 3. Analiza i poprawa kolumn

```{r}
 #dodanie kolumny na weekdays i weekend, usuniecie .csv
#usuniecie id wiersza?
 # kolumna room- private, shared
#typy kolumn zmiana combined_data mutate na factor poza file name 
#miasta z duzej litery 
#inne kolumny

  
```

## 4. Analiza danych w kolumnach

```{r}
#summary
#hist()
#table()
#str()
#glimpse()
```

## 5. Analiza związków między kolumnami

## 6. Wnioski

## 7. Prezentacja wyników

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
